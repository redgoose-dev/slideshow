{"version":3,"file":"index.js","sources":["../src/screen/Preference/Data/ButtonIcon.vue","../src/screen/Preference/Data/ModalWrapper.vue","../src/screen/Preference/Data/Manage/Slides.vue","../src/screen/Preference/Data/Manage/ManageGroup.vue","../src/screen/Preference/Data/Manage/ManageSlide.vue","../src/screen/Preference/Data/Manage/index.vue","../src/components/Form/Upload.vue","../src/screen/Preference/Data/ImportData.vue","../src/screen/Preference/Data/index.vue"],"sourcesContent":["<template>\n<button\n  type=\"button\"\n  :title=\"title\"\n  class=\"button-icon\">\n  <Icon :icon-name=\"iconName\"/>\n</button>\n</template>\n\n<script>\nimport { defineComponent } from 'vue';\nimport Icon from '~/components/Icon/index.vue';\n\nexport default defineComponent({\n  name: 'PreferenceDataButtonIcon',\n  components: {\n    Icon,\n  },\n  props: {\n    iconName: String,\n    title: String,\n  },\n});\n</script>\n\n<style lang=\"scss\" scoped>\n@use '../../../assets/scss/mixins';\n\n.button-icon {\n  display: block;\n  width: var(--button-size, 36px);\n  height: var(--button-size, 36px);\n  margin: 0;\n  padding: 0;\n  font-size: 0;\n  border: none;\n  background: var(--color-shape-button);\n  cursor: pointer;\n  border-radius: var(--size-shape-radius);\n  box-sizing: border-box;\n  outline: none;\n  -webkit-tap-highlight-color: transparent;\n  transition: box-shadow var(--speed-button-active) ease-out;\n  > svg {\n    display: block;\n    margin: 0 auto;\n    --icon-color: var(--color-invert);\n    --icon-stroke: 1.5;\n    --icon-size: 20px;\n  }\n  &:active {\n    box-shadow: inset 0 0 12px 0 rgba(0,0,0,.2);\n  }\n  &:focus {\n    box-shadow: 0 0 0 2px var(--color-key), inset 0 0 8px 0 rgba(0,0,0,.2);\n  }\n  @include mixins.dark-mode() {\n    > svg {\n      --icon-color: var(--color-fill);\n    }\n  }\n}\n</style>\n","<template>\n<article class=\"modal-wrapper\" @click=\"$emit('close')\">\n  <div class=\"modal-wrapper__box\" @click=\"e => { e.stopPropagation() }\">\n    <header class=\"modal-wrapper__header\">\n      <h2>{{title}}</h2>\n      <nav>\n        <button\n          type=\"button\"\n          :title=\"t('base.close')\"\n          @click=\"$emit('close')\">\n          <Icon icon-name=\"x\"/>\n        </button>\n      </nav>\n    </header>\n    <div class=\"modal-wrapper__body\">\n      <slot/>\n    </div>\n  </div>\n</article>\n</template>\n\n<script setup>\nimport i18n from '~/i18n';\nimport Icon from '~/components/Icon/index.vue';\n\nconst name = 'ModalWrapper';\nconst { t } = i18n.global;\nconst props = defineProps({\n  title: { type: String, default: 'Title' },\n});\nconst emits = defineEmits({ 'close': null });\n</script>\n\n<style src=\"./ModalWrapper.scss\" lang=\"scss\" scoped></style>\n","<template>\n<ul :data-key=\"itemKey\" class=\"data-slides\">\n  <li\n    v-for=\"(slide,k) in items\"\n    :data-key=\"k\"\n    :draggable=\"true\"\n    :class=\"[\n      'data-slide',\n      state.dragStartKey === k && 'data-slide--start',\n      state.dragStartKey !== state.dragPlaceholderKey && state.dragPlaceholderKey === k && 'data-slide--placeholder',\n    ]\"\n    @mousedown=\"onMouseDown\"\n    @dragstart=\"onDragStart\">\n    <div class=\"data-slide__handle\">\n      <i>\n        <Icon icon-name=\"menu-flat\"/>\n      </i>\n    </div>\n    <div class=\"data-slide__body\">\n      <h4 :class=\"!slide.title ? 'none' : ''\">\n        {{slide.title || 'None'}}\n      </h4>\n      <p v-if=\"slide.description\">{{slide.description}}</p>\n      <nav>\n        <a :href=\"slide.src\" target=\"_blank\">\n          {{t('base.image')}}\n        </a>\n        <a v-if=\"slide.thumbnail\" :href=\"slide.thumbnail\" target=\"_blank\">\n          {{t('base.thumbnail')}}\n        </a>\n      </nav>\n    </div>\n    <nav class=\"data-slide__nav\">\n      <button\n        type=\"button\"\n        :title=\"t('base.edit')\"\n        class=\"edit\"\n        @click=\"$emit('edit', k)\">\n        <Icon icon-name=\"edit\"/>\n      </button>\n      <button\n        type=\"button\"\n        :title=\"t('base.remove')\"\n        class=\"remove\"\n        @click=\"$emit('remove', k)\">\n        <Icon icon-name=\"x\"/>\n      </button>\n    </nav>\n  </li>\n  <li v-if=\"!(items && items.length > 0)\" class=\"data-slides__empty\">\n    {{t('description.empty')}}\n  </li>\n</ul>\n</template>\n\n<script setup>\nimport { reactive } from 'vue';\nimport i18n from '~/i18n';\nimport { convertPureObject } from '~/libs/object';\nimport Icon from '~/components/Icon/index.vue';\n\nconst name = 'Slides';\nconst { t } = i18n.global;\nconst props = defineProps({\n  itemKey: String,\n  items: { type: Array, required: true },\n});\nconst emits = defineEmits({\n  'change-order': null,\n  'edit': null,\n  'remove': null,\n});\nlet state = reactive({\n  dragStartKey: undefined,\n  dragPlaceholderKey: undefined,\n});\nlet dragTarget;\nlet dragItems;\n\n// methods\nfunction getTargetElement(el)\n{\n  return el.dataset.key ? el : el.closest('li');\n}\nfunction onMouseDown(e)\n{\n  dragTarget = e.target;\n}\nfunction onDragStart(e)\n{\n  if (!dragTarget.closest('.data-slide__handle > i'))\n  {\n    e.preventDefault();\n    return;\n  }\n  dragTarget = getTargetElement(e.target);\n  dragItems = dragTarget.parentNode.children;\n  state.dragStartKey = Number(dragTarget.dataset.key);\n  for (let i=0; i<dragItems.length; i++)\n  {\n    dragItems[i].addEventListener('dragover', onDragOver);\n    dragItems[i].addEventListener('drop', onDrop);\n    dragItems[i].addEventListener('dragend', onDragEnd);\n  }\n}\nfunction onDragOver(e)\n{\n  if (e.preventDefault) e.preventDefault();\n  e.dataTransfer.dropEffect = 'move';\n  let target = getTargetElement(e.target);\n  state.dragPlaceholderKey = Number(target.dataset.key);\n}\nfunction onDrop(e)\n{\n  let target = getTargetElement(e.target);\n  if (state.dragStartKey === state.dragPlaceholderKey) return;\n  let clone = convertPureObject(props.items);\n  clone.splice(state.dragStartKey, 1);\n  clone.splice(Number(target.dataset.key), 0, convertPureObject(props.items[state.dragStartKey]));\n  context.emit('change-order', clone);\n}\nfunction onDragEnd()\n{\n  if (!(dragTarget && dragItems)) return;\n  for (let i=0; i<dragItems.length; i++)\n  {\n    dragItems[i].removeEventListener('dragover', onDragOver);\n    dragItems[i].removeEventListener('drop', onDrop);\n    dragItems[i].removeEventListener('dragend', onDragEnd);\n  }\n  dragTarget = undefined;\n  dragItems = undefined;\n  state.dragStartKey = undefined;\n  state.dragPlaceholderKey = undefined;\n}\n</script>\n\n<style src=\"./Slides.scss\" lang=\"scss\" scoped></style>\n","<template>\n<form @submit=\"onSubmit\">\n  <fieldset>\n    <legend>Manage slides group fields</legend>\n    <div class=\"fields\">\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_key\" class=\"required\">\n            {{t('base.groupKey')}}\n          </label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.inputKeyOnGroup')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormText\n            name=\"pref_key\"\n            id=\"pref_key\"\n            :placeholder=\"t('base.inputKey')\"\n            :inline=\"true\"\n            :required=\"true\"\n            :size=\"24\"\n            :maxlength=\"20\"\n            :color=\"state.error.key ? 'error' : ''\"\n            v-model=\"state.form.key\"\n            @update:modelValue=\"onUpdateKey\"/>\n        </div>\n      </div>\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_name\">{{t('base.name')}}</label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.setCategoryName')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormText\n            name=\"pref_name\"\n            id=\"pref_name\"\n            :placeholder=\"t('base.inputText')\"\n            :maxlength=\"32\"\n            v-model=\"state.form.name\"/>\n        </div>\n      </div>\n    </div>\n    <div class=\"field-basic\">\n      <h3 class=\"field-title\">\n        <label for=\"pref_description\">\n          {{t('base.description')}}\n        </label>\n      </h3>\n      <p class=\"field-description\">\n        {{t('description.setCategoryDescription')}}\n      </p>\n      <div class=\"field-basic__body\">\n        <FormText\n          name=\"pref_description\"\n          id=\"pref_description\"\n          :placeholder=\"t('base.inputText')\"\n          :maxlength=\"80\"\n          v-model=\"state.form.description\"/>\n      </div>\n    </div>\n    <div class=\"field-basic\">\n      <h3 class=\"field-title\">\n        <label for=\"pref_slideType\">\n          {{t('title.selectSlidesType')}}\n        </label>\n      </h3>\n      <p class=\"field-description\">\n        {{t('description.selectSlidesType')}}\n        {{form.type === 'edit' ? t('description.selectSlidesType2') : ''}}\n      </p>\n      <div class=\"field-basic__body\">\n        <FormRadio\n          type=\"button\"\n          name=\"pref_slideType\"\n          id=\"prof_slideType\"\n          :title=\"t('title.selectSlidesType')\"\n          :items=\"[\n              { key: 'array', label: t('base.array') },\n              { key: 'url', label: `URL ${t('base.address')}` },\n            ]\"\n          v-model=\"state.form.slidesType\"/>\n      </div>\n    </div>\n    <div v-if=\"state.form.slidesType === 'url'\" class=\"field-basic\">\n      <h3 class=\"field-title\">\n        <label for=\"pref_slidesUrl\">\n          {{t('title.slidesUrlAddress')}}\n        </label>\n      </h3>\n      <p class=\"field-description\">\n        {{t('description.inputSlidesUrl')}}\n      </p>\n      <div class=\"field-basic__body\">\n        <FormText\n          name=\"pref_slidesUrl\"\n          id=\"pref_slidesUrl\"\n          :placeholder=\"t('base.inputUrl')\"\n          :required=\"true\"\n          v-model=\"state.form.slidesUrl\"/>\n      </div>\n    </div>\n    <nav class=\"submit-buttons\">\n      <div>\n        <ButtonBasic type=\"submit\" color=\"key\" :inline=\"true\">\n          {{form.type === 'add' ? t('label.addGroup') : t('label.editGroup')}}\n        </ButtonBasic>\n      </div>\n    </nav>\n  </fieldset>\n</form>\n</template>\n\n<script setup>\nimport { reactive } from 'vue';\nimport i18n from '~/i18n';\nimport FormText from '~/components/Form/Text.vue';\nimport ButtonBasic from '~/components/Button/Basic.vue';\nimport FormRadio from '~/components/Form/Radio.vue';\n\nconst name = 'ManageGroup';\nconst { t } = i18n.global;\nconst props = defineProps({ form: Object });\nconst emits = defineEmits({ 'submit': null });\nlet state = reactive({\n  form: props.form,\n  error: {\n    key: false,\n  },\n  slides: {\n    type: props.form.slidesType || 'array', // url,array\n    url: props.form.slidesUrl || '', // api url address\n  },\n});\n\n// methods\nfunction onUpdateKey(str)\n{\n  if (!str) state.error.key = true;\n  state.error.key = !/^[a-zA-Z0-9_]+$/.test(str);\n}\nfunction onSubmit(e)\n{\n  e.preventDefault();\n  try\n  {\n    if (state.error.key)\n    {\n      throw new Error('error value / key');\n    }\n    emits('submit', state.form);\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.errorSubmit'));\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use '../../fieldset.scss';\n</style>\n","<template>\n<form @submit=\"onSubmit\">\n  <fieldset>\n    <legend>Manage slide fields</legend>\n    <div class=\"fields\">\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_src\" class=\"required\">{{t('base.imageUrl')}}</label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.inputImageUrl')}}\n        </p>\n        <div class=\"field-multiple\">\n          <div class=\"field-multiple__body\">\n            <FormText\n              ref=\"src\"\n              name=\"pref_src\"\n              id=\"pref_src\"\n              :placeholder=\"t('base.inputUrl')\"\n              :required=\"false\"\n              v-model=\"state.form.src\"/>\n          </div>\n          <nav>\n            <ButtonBasic\n              type=\"button\"\n              @click=\"onClickCheckUrl('src')\">\n              {{t('base.openUrl')}}\n            </ButtonBasic>\n          </nav>\n        </div>\n      </div>\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_thumbnail\">\n            {{t('base.urlThumbnailUrl')}}\n          </label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.inputThumbnailUrl')}}\n        </p>\n        <div class=\"field-multiple\">\n          <div class=\"field-multiple__body\">\n            <FormText\n              ref=\"thumbnail\"\n              name=\"pref_thumbnail\"\n              id=\"pref_thumbnail\"\n              :placeholder=\"t('base.inputUrl')\"\n              v-model=\"state.form.thumbnail\"/>\n          </div>\n          <nav>\n            <ButtonBasic\n              type=\"button\"\n              @click=\"onClickCheckUrl('thumbnail')\">\n              {{t('base.openUrl')}}\n            </ButtonBasic>\n          </nav>\n        </div>\n      </div>\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_title\">{{t('base.subject')}}</label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.inputSlideTitle')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormText\n            name=\"pref_title\"\n            id=\"pref_title\"\n            :placeholder=\"t('base.inputText')\"\n            v-model=\"state.form.title\"/>\n        </div>\n      </div>\n      <div class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_description\">{{t('base.description')}}</label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.inputDescriptionSlide')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormText\n            name=\"pref_description\"\n            id=\"pref_description\"\n            :placeholder=\"t('base.inputText')\"\n            v-model=\"state.form.description\"/>\n        </div>\n      </div>\n    </div>\n    <nav class=\"submit-buttons\">\n      <div>\n        <ButtonBasic type=\"submit\" color=\"key\" :inline=\"true\">\n          {{form.type === 'add' ? t('base.add') : t('base.submitEdit')}}\n        </ButtonBasic>\n      </div>\n    </nav>\n  </fieldset>\n</form>\n</template>\n\n<script setup>\nimport { reactive, ref } from 'vue';\nimport i18n from '~/i18n';\nimport { validUrl } from '~/libs/string';\nimport FormText from '~/components/Form/Text.vue';\nimport ButtonBasic from '~/components/Button/Basic.vue';\n\nconst name = 'ManageSlide';\nconst { t } = i18n.global;\nconst props = defineProps({ form: Object });\nconst emits = defineEmits({ 'submit': null });\nlet state = reactive({ form: props.form });\nconst src = ref(null);\nconst thumbnail = ref(null);\n\n// methods\nfunction onClickCheckUrl(key)\n{\n  const check = validUrl(state.form[key]);\n  if (check)\n  {\n    window.open(state.form[key]);\n  }\n  else\n  {\n    alert(t('alert.invalidAddress'));\n    switch (key)\n    {\n      case 'src':\n        src.value.focus();\n        break;\n      case 'thumbnail':\n        thumbnail.value.focus();\n        break;\n    }\n  }\n}\nfunction onSubmit(e)\n{\n  e.preventDefault();\n  try\n  {\n    if (!(state.form.src && validUrl(state.form.src)))\n    {\n      src.value.focus();\n      throw new Error('no image src address');\n    }\n    emits('submit', state.form);\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.errorSubmit'));\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use '../../fieldset.scss';\n</style>\n","<template>\n<article class=\"manage-tree\">\n  <section v-for=\"(item,k) in computes.index\" class=\"tree-item\">\n    <header class=\"tree-item__header\">\n      <nav>\n        <button\n          type=\"button\"\n          :title=\"t('title.fold')\"\n          :disabled=\"!item.fold\"\n          :class=\"[\n            item.fold ? 'fold' : 'minus',\n            (item.fold && state.fold[item.key]) && 'fold--on',\n          ]\"\n          @click=\"onToggleFold(item.key)\">\n          <Icon :icon-name=\"item.fold ? 'arrow-down' : 'minus'\"/>\n        </button>\n      </nav>\n      <h3>\n        <strong>\n          <b>{{item.key}}</b>\n          {{item.name}}\n          <em v-if=\"item.fold\">{{item.slides.length}}</em>\n        </strong>\n        <span v-if=\"item.description\">\n          {{item.description}}\n        </span>\n      </h3>\n      <nav>\n        <button\n          v-if=\"item.fold\"\n          type=\"button\"\n          :title=\"t('label.addSlide')\"\n          class=\"add\"\n          @click=\"onAddSlide(item.key)\">\n          <Icon icon-name=\"plus\"/>\n        </button>\n        <button\n          type=\"button\"\n          :title=\"t('label.editGroup')\"\n          class=\"edit\"\n          @click=\"onEditGroup(item.key)\">\n          <Icon icon-name=\"edit\"/>\n        </button>\n        <button\n          type=\"button\"\n          :title=\"t('label.removeGroup')\"\n          class=\"remove\"\n          @click=\"onRemoveGroup(item.key)\">\n          <Icon icon-name=\"x\"/>\n        </button>\n      </nav>\n    </header>\n    <Slides\n      v-if=\"state.fold[item.key] && item.fold\"\n      :item-key=\"item.key\"\n      :items=\"item.slides\"\n      @change-order=\"o => onUpdateSlides(item.key, o)\"\n      @edit=\"n => onEditSlide(item.key, n)\"\n      @remove=\"n => onRemoveSlide(item.key, n)\"/>\n  </section>\n  <nav class=\"add-tree\">\n    <ButtonBasic\n      :title=\"t('label.addGroup')\"\n      color=\"key\"\n      @click=\"onAddGroup\">\n      {{t('label.addGroup')}}\n    </ButtonBasic>\n  </nav>\n  <teleport to=\"#slideshowModal\">\n    <ModalWrapper\n      v-if=\"state.showManageGroup\"\n      :title=\"t(state.manageFormGroup.type === 'edit' ? 'label.editGroup' : 'label.addGroup')\"\n      class=\"modal-edit-group\"\n      @close=\"state.showManageGroup = false\">\n      <ManageGroup\n        :form=\"state.manageFormGroup\"\n        @submit=\"onSubmitGroup\"/>\n    </ModalWrapper>\n    <ModalWrapper\n      v-if=\"state.showManageSlide\"\n      :title=\"t(state.editFormSlide.type === 'edit' ? 'label.editSlide' : 'label.addSlide')\"\n      class=\"modal-edit-slide\"\n      @close=\"state.showManageSlide = false\">\n      <ManageSlide\n        :form=\"state.editFormSlide\"\n        @submit=\"onSubmitSlide\"/>\n    </ModalWrapper>\n  </teleport>\n</article>\n</template>\n\n<script setup>\nimport { reactive, computed } from 'vue';\nimport i18n from '~/i18n';\nimport { convertPureObject } from '~/libs/object';\nimport Icon from '~/components/Icon/index.vue';\nimport ButtonBasic from '~/components/Button/Basic.vue';\nimport ModalWrapper from '~/screen/Preference/Data/ModalWrapper.vue';\nimport Slides from './Slides.vue';\nimport ManageGroup from './ManageGroup.vue';\nimport ManageSlide from './ManageSlide.vue';\n\nconst { t } = i18n.global;\nconst props = defineProps({\n  tree: { type: Object, required: true },\n});\nconst emits = defineEmits({ 'update': null });\nlet state = reactive({\n  fold: createFold(),\n  dragPlaceholder: undefined,\n  showManageGroup: false,\n  showManageSlide: false,\n  manageFormGroup: undefined,\n  editFormSlide: undefined,\n});\nlet computes = reactive({\n  index: computed(() => {\n    const keys = Object.keys(props.tree);\n    return keys.map(key => ({\n      ...props.tree[key],\n      fold: Array.isArray(props.tree[key].slides),\n      key,\n    }));\n  }),\n});\n\n// methods\nfunction createFold()\n{\n  let obj = {};\n  Object.keys(props.tree).forEach(key => {\n    obj[key] = false;\n  });\n  return obj;\n}\nfunction onUpdateSlides(key, newSlides)\n{\n  let clone = convertPureObject(props.tree);\n  clone[key].slides = newSlides;\n  emits('update', clone);\n}\nfunction onToggleFold(key, sw = undefined)\n{\n  state.fold[key] = sw === undefined ? !state.fold[key] : sw;\n}\nfunction onAddGroup()\n{\n  state.manageFormGroup = {\n    type: 'add',\n    key: '',\n    name: '',\n    description: '',\n    slidesType: 'array',\n    slidesUrl: '',\n  };\n  state.showManageGroup = true;\n}\nfunction onEditGroup(key)\n{\n  state.manageFormGroup = {\n    type: 'edit',\n    key: key,\n    originalKey: key,\n    name: props.tree[key].name,\n    description: props.tree[key].description,\n    slidesType: Array.isArray(props.tree[key].slides) ? 'array' : 'url',\n    slidesUrl: typeof props.tree[key].slides === 'string' ? props.tree[key].slides : '',\n  };\n  state.showManageGroup = true;\n}\nfunction onRemoveGroup(key)\n{\n  if (!confirm(t('confirm.remove'))) return;\n  let clone = convertPureObject(props.tree);\n  delete clone[key];\n  emits('update', clone);\n}\nfunction onSubmitGroup(res)\n{\n  try\n  {\n    const { key, originalKey, type, name, description, slidesUrl } = res;\n    let newKey;\n    let clone = convertPureObject(props.tree);\n    function testKey(str)\n    {\n      if (!/^[a-zA-Z0-9_]+$/.test(str)) throw new Error('Error key');\n      if (props.tree[str]) throw new Error('The value exists.');\n      return key;\n    }\n    switch (type)\n    {\n      case 'add':\n        newKey = testKey(key);\n        clone[newKey] = {\n          name,\n          description,\n          slides: (res.slidesType === 'url') ? res.slidesUrl : [],\n        };\n        break;\n      case 'edit':\n        newKey = (originalKey !== key) ? testKey(key) : key;\n        if (!newKey) throw new Error('Not a valid key.');\n        clone[newKey] = {\n          ...clone[originalKey],\n          name,\n          description,\n        };\n        if (res.slidesType === 'url')\n        {\n          clone[newKey].slides = res.slidesUrl;\n        }\n        else if (!Array.isArray(clone[newKey].slides))\n        {\n          clone[newKey].slides = [];\n        }\n        if (originalKey !== key) delete clone[originalKey];\n        break;\n    }\n    emits('update', clone);\n    state.showManageGroup = false;\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.errorSubmit'));\n  }\n}\nfunction onAddSlide(key)\n{\n  state.editFormSlide = {\n    type: 'add',\n    groupKey: key,\n    src: '',\n    thumbnail: '',\n    title: '',\n    description: '',\n  };\n  state.showManageSlide = true;\n}\nfunction onEditSlide(key, n)\n{\n  const item = props.tree[key].slides[n];\n  state.editFormSlide = {\n    type: 'edit',\n    groupKey: key,\n    key: n,\n    src: item.src,\n    thumbnail: item.thumbnail,\n    title: item.title,\n    description: item.description,\n  };\n  state.showManageSlide = true;\n}\nfunction onRemoveSlide(key, n)\n{\n  if (!confirm(t('confirm.remove'))) return;\n  let clone = convertPureObject(props.tree);\n  clone[key].slides.splice(n, 1);\n  emits('update', clone);\n}\nfunction onSubmitSlide(res)\n{\n  const { type, groupKey, key, src, thumbnail, title, description } = res;\n  let clone = convertPureObject(props.tree);\n  try\n  {\n    const obj = {\n      src,\n      thumbnail,\n      title,\n      description,\n    };\n    switch (type)\n    {\n      case 'add':\n        clone[groupKey].slides.push(obj);\n        break;\n      case 'edit':\n        clone[groupKey].slides[key] = obj;\n        break;\n    }\n    onToggleFold(groupKey, true);\n    emits('update', clone);\n    state.showManageSlide = false;\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.errorSubmit'));\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use './index';\n.modal-edit-group {\n  --modal-size-height: 560px;\n}\n.modal-edit-slide {\n  --modal-size-height: 690px;\n}\n</style>\n","<template>\n<label\n  :class=\"[\n    'form',\n    'form-upload',\n    disabled && 'form-upload--disabled',\n  ]\">\n  <input\n    ref=\"input\"\n    type=\"file\"\n    class=\"form-upload__input\"\n    :accept=\"accept\"\n    :disabled=\"disabled\"\n    @change=\"onChange\">\n  <span class=\"form-upload__body\">\n    <Icon icon-name=\"file\"/>\n    <em>\n      {{state.filename || label}}\n    </em>\n    <i>\n      <Icon icon-name=\"upload\"/>\n    </i>\n  </span>\n</label>\n</template>\n\n<script setup>\nimport { reactive, ref } from 'vue';\nimport Icon from '~/components/Icon/index.vue';\n\nconst name = 'FormUpload';\nconst props = defineProps({\n  name: String,\n  id: String,\n  label: { type: String, default: 'Please upload file' },\n  disabled: Boolean,\n  accept: String,\n});\nconst emits = defineEmits([ 'change' ]);\nlet state = reactive({ filename: '' });\nconst input = ref(null);\n\n// methods\nfunction onChange(e)\n{\n  if (!(e.target.files && e.target.files[0])) return;\n  state.filename = e.target.files[0].name;\n  emits('change', e.target.files);\n}\nfunction focus()\n{\n  input.value.focus();\n}\n\n// set expose\ndefineExpose({\n  input,\n  focus,\n});\n</script>\n\n<style src=\"./Upload.scss\" lang=\"scss\" scoped></style>\n","<template>\n<form class=\"import-data\" @submit=\"onSubmit\">\n  <fieldset>\n    <legend>Import data fields</legend>\n    <div class=\"fields\">\n      <div class=\"field-basic\">\n        <div class=\"field-basic__body\">\n          <FormRadio\n            name=\"pref_mode\"\n            id=\"prof_mode\"\n            :title=\"t('description.importDataMethod')\"\n            :items=\"[\n              { key: 'address', label: t('base.address') },\n              { key: 'file', label: t('base.file') },\n            ]\"\n            v-model=\"state.mode\"/>\n        </div>\n      </div>\n      <div v-if=\"state.mode === 'address'\" class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_address\">\n            {{t('title.importDataByAddress')}}\n          </label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.getDataByRestAPI')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormText\n            ref=\"address\"\n            name=\"pref_address\"\n            id=\"pref_address\"\n            :placeholder=\"t('base.inputAddress')\"\n            v-model=\"state.address\"/>\n        </div>\n      </div>\n      <div v-if=\"state.mode === 'file'\" class=\"field-basic\">\n        <h3 class=\"field-title\">\n          <label for=\"pref_address\">\n            {{t('title.importDataByFile')}}\n          </label>\n        </h3>\n        <p class=\"field-description\">\n          {{t('description.getJsonFile')}}\n        </p>\n        <div class=\"field-basic__body\">\n          <FormUpload\n            ref=\"file\"\n            accept=\"application/json\"\n            :label=\"t('description.selectJsonFile')\"\n            @change=\"onSelectFile\"/>\n        </div>\n      </div>\n    </div>\n    <nav class=\"submit-buttons\">\n      <div>\n        <ButtonBasic\n          type=\"submit\"\n          :color=\"state.processing ? '' : 'key'\"\n          :disabled=\"state.processing\"\n          :inline=\"true\">\n          {{state.processing ? t('base.processing') : t('label.getData')}}\n        </ButtonBasic>\n      </div>\n    </nav>\n  </fieldset>\n</form>\n</template>\n\n<script setup>\nimport { reactive, ref } from 'vue';\nimport i18n from '~/i18n';\nimport { getApiData, getFileData } from '~/libs/util';\nimport { checkTree } from '~/libs/object';\nimport FormRadio from '~/components/Form/Radio.vue';\nimport FormText from '~/components/Form/Text.vue';\nimport FormUpload from '~/components/Form/Upload.vue';\nimport ButtonBasic from '~/components/Button/Basic.vue';\n\nconst { t } = i18n.global;\nlet state = reactive({\n  mode: 'address', // address,file\n  address: 'https://raw.githubusercontent.com/redgoose-dev/slideshow/main/resource/example/tree.json',\n  file: null,\n  processing: false,\n});\nconst address = ref(null);\nconst file = ref(null);\nconst emits = defineEmits({ 'update': null });\n\n// methods\nfunction onSelectFile(e)\n{\n  if (e[0]) state.file = e[0];\n}\nasync function onSubmit(e)\n{\n  e.preventDefault();\n  state.processing = true;\n  try\n  {\n    let res;\n    switch (state.mode)\n    {\n      case 'address':\n        if (!state.address)\n        {\n          address.value.focus();\n          throw new Error('no address');\n        }\n        res = await getApiData(state.address);\n        break;\n      case 'file':\n        if (!state.file)\n        {\n          file.value.focus();\n          throw new Error('no file');\n        }\n        res = await getFileData(state.file);\n        break;\n      default:\n        throw new Error('no mode');\n    }\n    if (Array.isArray(res))\n    {\n      res = {\n        default: {\n          slides: res,\n        }\n      };\n    }\n    checkTree(res);\n    emits('update', res);\n    state.processing = false;\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.failedGetData'));\n    state.processing = false;\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n@use '../fieldset.scss';\n</style>\n","<template>\n<fieldset class=\"pref-data\">\n  <legend>Data fields</legend>\n  <div class=\"fields\">\n    <div class=\"field-basic\">\n      <h3 class=\"field-title\">\n        {{t('title.manageSlideData')}}\n      </h3>\n      <div class=\"field-basic__body\">\n        <div class=\"manage-tree\">\n          <nav class=\"manage-tree-toolbar\">\n            <div>\n              <FormRadio\n                type=\"button\"\n                name=\"pref_mode\"\n                id=\"prof_mode\"\n                :title=\"t('title.changeMode')\"\n                :items=\"[\n                  { key: 'basic', label: t('base.basic') },\n                  { key: 'advanced', label: t('base.advanced') },\n                ]\"\n                :modelValue=\"localState.mode\"\n                @update:model-value=\"onChangeMode\"\n                class=\"manage-tree__mode\"/>\n            </div>\n            <div>\n              <ButtonIcon\n                :title=\"t('title.importSlideData')\"\n                icon-name=\"download\"\n                class=\"manage-tree__button\"\n                @click=\"localState.showImportData = true\"/>\n            </div>\n          </nav>\n          <div class=\"manage-tree-body\">\n            <Manage\n              v-if=\"localState.mode === 'basic'\"\n              :tree=\"state.tree\"\n              @update=\"onUpdateTreeUI\"/>\n            <FormText\n              v-else-if=\"localState.mode === 'advanced'\"\n              ref=\"tree\"\n              type=\"textarea\"\n              name=\"pref_tree\"\n              id=\"pref_tree\"\n              :placeholder=\"t('description.inputSlideDataCode')\"\n              :rows=\"15\"\n              :color=\"localState.textTreeColor\"\n              v-model=\"state.tree\"\n              @update:modelValue=\"onUpdateTreeSource\"/>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <teleport to=\"#slideshowModal\">\n    <ModalWrapper\n      v-if=\"localState.showImportData\"\n      :title=\"t('title.getSlideItems')\"\n      class=\"pref-data__import-data\"\n      @close=\"localState.showImportData = false\">\n      <ImportData @update=\"onImportData\"/>\n    </ModalWrapper>\n  </teleport>\n</fieldset>\n</template>\n\n<script setup>\nimport { reactive } from 'vue';\nimport i18n from '~/i18n';\nimport { checkTree } from '~/libs/object';\nimport { objectToString } from '~/libs/string';\nimport FormText from '~/components/Form/Text.vue';\nimport FormRadio from '~/components/Form/Radio.vue';\nimport ButtonIcon from './ButtonIcon.vue';\nimport Manage from './Manage/index.vue';\nimport ModalWrapper from './ModalWrapper.vue';\nimport ImportData from './ImportData.vue';\n\nconst { t } = i18n.global;\nconst props = defineProps({ structure: Object });\nconst emits = defineEmits({ 'update': null });\nlet localState = reactive({\n  mode: 'basic', // basic,advanced\n  showImportData: false,\n  textTreeColor: undefined,\n});\nlet state = reactive({\n  tree: localState.mode === 'advanced' ? JSON.stringify(props.structure.tree, null, 2) : props.structure.tree,\n});\nlet timer;\n\n// methods\nfunction onChangeMode(key)\n{\n  try\n  {\n    switch (key)\n    {\n      case 'basic':\n        let tree = JSON.parse(state.tree);\n        if (!checkTree(tree)) throw new Error('error tree');\n        state.tree = tree;\n        localState.mode = key;\n        break;\n      case 'advanced':\n        state.tree = objectToString(state.tree);\n        localState.mode = key;\n        break;\n    }\n  }\n  catch(e)\n  {\n    if (window.dev) console.error(e.message);\n    alert(t('alert.invalidData'));\n  }\n}\nfunction onUpdateTreeSource(str)\n{\n  if (timer) clearTimeout(timer);\n  timer = setTimeout(() => {\n    try\n    {\n      let tree = JSON.parse(str);\n      localState.textTreeColor = undefined;\n      // update parent component\n      emits('update', { tree });\n    }\n    catch(e)\n    {\n      localState.textTreeColor = 'error';\n    }\n  }, 600);\n}\nfunction onUpdateTreeUI(tree)\n{\n  state.tree = tree;\n  emits('update', { tree });\n}\nfunction onImportData(res)\n{\n  switch (localState.mode)\n  {\n    case 'advanced':\n      state.tree = objectToString(res);\n      break;\n    default:\n      state.tree = res;\n      break;\n  }\n  emits('update', { tree: res });\n  localState.showImportData = false;\n}\n</script>\n\n<style src=\"./index.scss\" lang=\"scss\" scoped></style>\n"],"names":["_openBlock"],"mappings":"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"}