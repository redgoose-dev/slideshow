{"version":3,"file":"Text.js","sources":["../src/components/Form/Text.vue"],"sourcesContent":["<template>\n<textarea\n  v-if=\"props.type === 'textarea'\"\n  ref=\"root\"\n  :type=\"props.type\"\n  :name=\"props.name\"\n  :id=\"props.id\"\n  :value=\"props.modelValue\"\n  :placeholder=\"props.placeholder\"\n  :required=\"props.required\"\n  :min=\"props.min\"\n  :max=\"props.max\"\n  :step=\"props.step\"\n  :maxlength=\"props.maxlength\"\n  :rows=\"props.rows\"\n  :size=\"props.size\"\n  :class=\"[\n    'form',\n    'form-text',\n    props.inline && 'form-text--inline',\n    props.color && `form-text--color-${props.color}`,\n  ]\"\n  @input=\"onChange\"\n  @blur=\"$emit('blur:modelValue', $event.target.value)\"/>\n<input\n  v-else\n  ref=\"root\"\n  :type=\"props.type\"\n  :name=\"props.name\"\n  :id=\"props.id\"\n  :value=\"props.modelValue\"\n  :placeholder=\"props.placeholder\"\n  :required=\"props.required\"\n  :min=\"props.min\"\n  :max=\"props.max\"\n  :step=\"props.step\"\n  :maxlength=\"props.maxlength\"\n  :size=\"props.size\"\n  :class=\"[\n    'form',\n    'form-text',\n    props.inline && 'form-text--inline',\n    props.color && `form-text--color-${props.color}`,\n  ]\"\n  @input=\"onChange\"\n  @blur=\"$emit('blur:modelValue', $event.target.value)\"/>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport * as util from '~/libs/util';\n\nconst name = 'FormText';\nconst props = defineProps({\n  type: { type: String, default: 'text' }, // text,tel\n  name: String,\n  id: String,\n  placeholder: String,\n  required: Boolean,\n  min: Number,\n  max: Number,\n  step: Number,\n  maxlength: Number,\n  inline: Boolean,\n  rows: { type: Number, default: 3 },\n  size: { type: Number, default: 10 },\n  color: String, // error,success\n  modelType: String,\n  modelValue: [ String, Number, Boolean, Array ],\n});\nconst emits = defineEmits([ 'update:modelValue', 'blur:modelValue' ]);\nconst root = ref(0);\n\nfunction onChange(e)\n{\n  emits('update:modelValue', util.getValueFromType(props.modelType, e.target.value));\n}\nfunction focus()\n{\n  if (root.value) root.value.focus();\n}\n\n// set expose\ndefineExpose({\n  focus,\n});\n</script>\n\n<style src=\"./Text.scss\" lang=\"scss\" scoped></style>\n"],"names":["util.getValueFromType"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAuEA,UAAM,OAAO,IAAI;AAEjB,sBAAkB,GAClB;AACE,YAAM,qBAAqBA,iBAAsB,MAAM,WAAW,EAAE,OAAO;AAAA;AAE7E,qBACA;AACE,UAAI,KAAK;AAAO,aAAK,MAAM;AAAA;AAI7B,WAAa;AAAA,MACX;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}